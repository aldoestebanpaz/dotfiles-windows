"" Basic UI components
"" ----------------

" Show the line and column number of the cursor position, separated by a comma.
" tags -- 'ruler'
set ruler

" On pressing <Tab> to invoke completion, the possible matches are shown just above the command line,
" tags -- 'wildmenu'
set wildmenu

" Print the line number in front of each line.
" tags -- 'number'
set number

" Disable beeping and screen flashing
" Source: https://vim.fandom.com/wiki/Disable_beeping
" tags -- 'errorbells' 'visualbell'
set noerrorbells
set novisualbell


"" Basic behavior
"" ----------------

" Sets the character encoding used inside Vim.  It applies to text in
" the buffers, registers, Strings in expressions, text stored in the
" viminfo file, etc.  It sets the kind of characters which Vim can work with.
" tags -- 'encoding'
set encoding=utf8

" Make the <BS> work like in most other programs
" Source: https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode
set backspace=indent,eol,start

" Cause the left and right arrow keys, as well as h and l, to wrap when used at beginning or end of lines.
" [ ] are the cursor keys in insert mode.
" Source: https://vim.fandom.com/wiki/Automatically_wrap_left_and_right
set whichwrap+=<,>,h,l,[,]

" Lines longer than the width of the window will wrap and displaying continues on the next line.
" tags -- 'wrap'
set wrap

" While typing a search command, show where the pattern, as it was typed so far, matches.
" tags -- 'incsearch'
set incsearch

" Highlight matches for a search pattern
" tags -- 'hlsearch' 'hls'
set hlsearch

" No backup files
" Source: https://vim.fandom.com/wiki/Remove_swap_and_backup_files_from_your_working_directory
set nobackup
set nowritebackup
set noswapfile

" Change tabs to spaces
" Source: https://vim.fandom.com/wiki/Converting_tabs_to_spaces
set tabstop=4
set shiftwidth=4
set expandtab

" Autoindent
" Source: https://vim.fandom.com/wiki/Indenting_source_code
set autoindent


"" Check changes from outside
"" ----------------

" When a file has been detected to have been changed outside of Vim and
"   it has not been changed inside of Vim, automatically read it again.
" tags -- 'autoread'
set autoread

" Check if any buffers were changed outside of Vim and trigger 'autoread'.
" This checks and warns you if you would end up with two versions of a file.
" Source: https://vim.fandom.com/wiki/Have_Vim_check_automatically_if_the_file_has_changed_externally
" tags -- :autocmd :checktime
autocmd FocusGained,BufEnter * checktime



"" Language specific plugins and indentation
"" ----------------

" Enable loading the indent file for specific file types.
" tags -- :filetype-indent-on
filetype indent on

" Enable loading the plugin files for specific file types.
" tags -- :filetype-plugin-on filetype-plugins
filetype plugin on



"" Pluggins to install
"" Plugin Manager: vim-plug (https://github.com/junegunn/vim-plug)
"" ----------------
call plug#begin('~/.vim/plugged')

" NERDTree (https://github.com/preservim/nerdtree)
" A tree explorer plugin for vim.
Plug 'preservim/nerdtree'

" fzf (https://github.com/junegunn/fzf.vim) - fzf and Vim.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Vim Better Whitespace (https://github.com/ntpeters/vim-better-whitespace)
" Causes all trailing whitespace characters to be highlighted.
Plug 'ntpeters/vim-better-whitespace'

" vim-signify (https://github.com/mhinz/vim-signify)
" Show a diff using Vim its sign column.
Plug 'mhinz/vim-signify'

" fugitive.vim (https://github.com/tpope/vim-fugitive)
" :Git (or just :G), which calls any arbitrary Git command.
Plug 'tpope/vim-fugitive'

" ALE (Asynchronous Lint Engine) (https://github.com/dense-analysis/ale)
" Check syntax in Vim asynchronously and fix files, with Language Server Protocol (LSP) support.
Plug 'dense-analysis/ale'

" vim-airline (https://github.com/vim-airline/vim-airline)
" Nice statusline at the bottom of each vim window.
Plug 'vim-airline/vim-airline'

" vim-code-dark (https://github.com/tomasiser/vim-code-dark)
" Dark color scheme for Vim and vim-airline, inspired by Dark+ in Visual Studio Code.
Plug 'tomasiser/vim-code-dark'

" vim-devicons (https://github.com/ryanoasis/vim-devicons)
" Adds file type icons to Vim plugins such as: NERDTree, vim-airline, CtrlP, unite, Denite, lightline, vim-startify and many more
Plug 'ryanoasis/vim-devicons'

" vim-markdown-toc (https://github.com/mzlogin/vim-markdown-toc)
" To generate table of contents for Markdown files.
Plug 'mzlogin/vim-markdown-toc'

call plug#end()



"" Special configurations
"" ----------------
" default updatetime 4000ms is not good for async update
set updatetime=100
" open NERDTree when no file argument provided
autocmd vimenter * if !argc() | NERDTree | endif
" Automatically close NERDtree when opening file
let g:NERDTreeQuitOnOpen = 1
" display a tab line at the top containing the name of all open tabs or buffers.
let g:airline#extensions#tabline#enabled = 1


"" Colorscheme
"" ----------------
if exists("+termguicolors")
    set termguicolors
    " Sometimes setting 'termguicolors' is not enough and one has to set the t_8f and t_8b options explicitly.
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

    colorscheme codedark
    let g:airline_theme = 'codedark'
endif

"" fix: Vim background color renders incorrectly
"" Source: https://github.com/microsoft/terminal/issues/832
if (&term =~ '^xterm' && &t_Co == 256)
  set &t_ut=
  set &ttyscroll=1
endif


"" Language specific settings
"" ----------------

" Enable syntax highlighting
" tags -- :syntax-on
syntax on



"" Commands
"" ----------------

" Select all file content in normal-mode
nnoremap <C-a> ggVG

" Linux - ":W" for su-write
" Source 1: https://vim.fandom.com/wiki/Su-write
" Source 2: https://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
" command W w !sudo tee "%" > /dev/null
" cnoremap W execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" "123<CR>" will jump to 123 in normal-mode
" Source: https://vim.fandom.com/wiki/Jump_to_a_line_number
:nnoremap <CR> G
:nmap <kEnter> <Enter>

" Clipboard accesing mapping
" Source: https://vim.fandom.com/wiki/Accessing_the_system_clipboard
" "C-c" in visual-mode will copy content in clipboard
" :vnoremap <C-c> "+y
" "C-x" in visual-mode will cut content in clipboard
" :vnoremap <C-x> "+d
" "C-v" in insert-mode will paste content from clipboard
":inoremap <C-v> <ESC>"+pa

" maps CTRL-X, CTRL-C, CTRL-V and CTRL-Z like in Windows.
" tags -- mxwin.vim
source $VIMRUNTIME/mswin.vim

" "C-s" for saving changes; this works in Windows Terminal at least.
" Ctrl-S is a common command to terminals to stop updating, it was a way to slow
" the output so you could read it on terminals that didn't have a scrollback
" buffer. First find out if you can configure your xterm to pass Ctrl-S through
" to the application. Then these map commands will work
" Source: https://stackoverflow.com/questions/3446320/in-vim-how-to-map-save-to-ctrl-s
noremap <silent> <C-s>   :w<CR>
vnoremap <silent> <C-s>  <Esc>:w<CR> \| :execute "normal! gv"<CR>
inoremap <silent> <C-s>  <C-o>:w<CR> " i_CTRL-O execute one command, return to Insert mode

" "C-n" for opening new tab
noremap <C-n> :NERDTreeClose \| :tabnew \| :Files<CR>

" "C-w" for closing a tab and the buffer
noremap <C-w> :bd<CR>

" "C-b" for switching buffers
noremap <C-b> :bn<CR>

" "A-b" for switching buffers in reverse order
noremap <A-b> :bp<CR>

" "C-t" for switching tabs
noremap <C-t> :tabn<CR>

" "A-t" for switching tabs in reverse order
noremap <A-t> :tabp<CR>

" "\q" exit discarding changes
nmap <leader>q <Esc>:q!<CR>

" "\qa" exit closing everything and discarding changes
nmap <leader>qa <Esc>:qa!<CR>

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

" "\n" toggle NERDTree panel
noremap <leader>n :NERDTreeToggle<CR>

" "\f" toggle fzf panel for opening a new buffer/file
noremap <leader>f :NERDTreeClose \| :Files<CR>

" Mapping fugitive commands
noremap <leader>gb :Gblame<CR>
noremap <leader>gs :Git<CR>
noremap <leader>gd :Gdiff<CR>
noremap <leader>gl :Glog<CR>
noremap <leader>gc :Gcommit<CR>
noremap <leader>gp :Git push<CR>

noremap <leader>toc :GenTocGFM<CR>

